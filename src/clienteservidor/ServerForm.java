/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clienteservidor;

import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import java.io.*;
import java.net.*;

/**
 *
 * @author carpi
 */
public class ServerForm extends javax.swing.JFrame {

    ServerSocket server = null;
    Socket client = null;
    DataOutputStream dos = null;
    DataInputStream dis = null;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ServerForm.class.getName());

    /**
     * Creates new form ServerForm
     */
    public ServerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_iniciar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_RecMsg = new javax.swing.JTextArea();
        txt_msg = new javax.swing.JTextField();
        btn_enviar = new javax.swing.JButton();
        btn_buscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");

        btn_iniciar.setText("Iniciar servidor");
        btn_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_iniciarActionPerformed(evt);
            }
        });

        txt_RecMsg.setColumns(20);
        txt_RecMsg.setRows(5);
        jScrollPane1.setViewportView(txt_RecMsg);

        btn_enviar.setText("Enviar");
        btn_enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enviarActionPerformed(evt);
            }
        });

        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_msg)
                    .addComponent(jScrollPane1)
                    .addComponent(btn_iniciar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_enviar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_buscar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btn_iniciar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_buscar)
                        .addGap(58, 58, 58)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_enviar))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_iniciarActionPerformed
        // TODO add your handling code here:
        try {
            int puerto = 5000; // Puerto
            server = new ServerSocket(puerto);
            JOptionPane.showMessageDialog(this, "Servidor escuchando en puerto " + puerto);
            client = server.accept();
            JOptionPane.showMessageDialog(this, "Cliente conectado desde: " + client.getInetAddress());

            dos = new DataOutputStream(client.getOutputStream());
            dis = new DataInputStream(client.getInputStream());

            // Hilo para recibir mensajes
            Thread recibir = new Thread(() -> {
                try {
                    String msg;
                    while ((msg = dis.readUTF()) != null) {
                        if (msg.startsWith("BUSCAR:")) {
                            // Procesar solicitud de búsqueda
                            String criterio = msg.substring(7); // Remover "BUSCAR:"
                            
                            javax.swing.SwingUtilities.invokeLater(() -> {
                                txt_RecMsg.append("\nCliente solicita buscar: " + criterio);
                            });
                            
                            try {
                                Person persona = DatabaseManager.buscarPersona(criterio);
                                
                                if (persona != null) {
                                    // Enviar resultado al cliente
                                    String resultado = persona.getCodigo() + "|" + persona.getNombre() + "|" + persona.getEdad();
                                    dos.writeUTF("RESULTADO:" + resultado);
                                    
                                    javax.swing.SwingUtilities.invokeLater(() -> {
                                        txt_RecMsg.append("\nEnviando resultado: " + persona.getNombre());
                                    });
                                } else {
                                    dos.writeUTF("RESULTADO:NO_ENCONTRADO");
                                    
                                    javax.swing.SwingUtilities.invokeLater(() -> {
                                        txt_RecMsg.append("\nNo se encontró persona con criterio: " + criterio);
                                    });
                                }
                            } catch (Exception e) {
                                try {
                                    dos.writeUTF("RESULTADO:ERROR");
                                } catch (IOException ioEx) {
                                    ioEx.printStackTrace();
                                }
                                
                                javax.swing.SwingUtilities.invokeLater(() -> {
                                    txt_RecMsg.append("\nError en búsqueda: " + e.getMessage());
                                });
                            }
                        } else {
                            txt_RecMsg.append("\nCliente: " + msg);
                        }
                    }
                } catch (IOException e) {
                    txt_RecMsg.append("\nConexión cerrada.");
                }
            });
            recibir.setDaemon(true);
            recibir.start();

        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btn_iniciarActionPerformed

    private void btn_enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enviarActionPerformed
        // TODO add your handling code here:
        try {
            String mensaje = txt_msg.getText();
            dos.writeUTF(mensaje);
            txt_RecMsg.append("\nYo: " + mensaje);
            txt_msg.setText("");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btn_enviarActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        try {
            String criterio = txt_msg.getText().trim();
            
            if (criterio.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor ingrese un código o nombre para buscar");
                return;
            }
            
            // Buscar en la base de datos
            Person persona = DatabaseManager.buscarPersona(criterio);
            
            if (persona != null) {
                // Mostrar resultado en el campo de texto
                txt_msg.setText("Código: " + persona.getCodigo() + ", Nombre: " + persona.getNombre() + ", Edad: " + persona.getEdad());
                txt_RecMsg.append("\nPersona encontrada: " + persona.getNombre() + " (Código: " + persona.getCodigo() + ", Edad: " + persona.getEdad() + ")");
            } else {
                txt_RecMsg.append("\nNo se encontró ninguna persona con el criterio: " + criterio);
                txt_msg.setText("");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage());
            txt_RecMsg.append("\nError en búsqueda: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ServerForm().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_enviar;
    private javax.swing.JButton btn_iniciar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_RecMsg;
    private javax.swing.JTextField txt_msg;
    // End of variables declaration//GEN-END:variables
}
